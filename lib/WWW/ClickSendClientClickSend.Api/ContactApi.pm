=begin comment

ClickSend v3 REST API

 This is the official [ClickSend](https://clicksend.com) SDK.  *You'll need to create a free account to use the API. You can register [here](https://www.clicksend.com/signup).*  You can use our API documentation along with the SDK. Our API docs can be found [here](https://developers.clicksend.com). 

OpenAPI spec version: 3.1.0
Contact: support@clicksend.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::ClickSendClient::ContactApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::ClickSendClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::ClickSendClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::ClickSendClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# lists_contacts_by_list_id_and_contact_id_delete
#
# Delete a contact
# 
# @param int $list_id List ID (required)
# @param int $contact_id Contact ID (required)
{
    my $params = {
    'list_id' => {
        data_type => 'int',
        description => 'List ID',
        required => '1',
    },
    'contact_id' => {
        data_type => 'int',
        description => 'Contact ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_contacts_by_list_id_and_contact_id_delete' } = { 
    	summary => 'Delete a contact',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_contacts_by_list_id_and_contact_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'list_id' is set
    unless (exists $args{'list_id'}) {
      croak("Missing the required parameter 'list_id' when calling lists_contacts_by_list_id_and_contact_id_delete");
    }

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling lists_contacts_by_list_id_and_contact_id_delete");
    }

    # parse inputs
    my $_resource_path = '/lists/{list_id}/contacts/{contact_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'list_id'}) {
        my $_base_variable = "{" . "list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contact_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# lists_contacts_by_list_id_and_contact_id_get
#
# Get a specific contact
# 
# @param int $list_id Your contact list id you want to access. (required)
# @param int $contact_id Your contact id you want to access. (required)
{
    my $params = {
    'list_id' => {
        data_type => 'int',
        description => 'Your contact list id you want to access.',
        required => '1',
    },
    'contact_id' => {
        data_type => 'int',
        description => 'Your contact id you want to access.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_contacts_by_list_id_and_contact_id_get' } = { 
    	summary => 'Get a specific contact',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_contacts_by_list_id_and_contact_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'list_id' is set
    unless (exists $args{'list_id'}) {
      croak("Missing the required parameter 'list_id' when calling lists_contacts_by_list_id_and_contact_id_get");
    }

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling lists_contacts_by_list_id_and_contact_id_get");
    }

    # parse inputs
    my $_resource_path = '/lists/{list_id}/contacts/{contact_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'list_id'}) {
        my $_base_variable = "{" . "list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contact_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# lists_contacts_by_list_id_and_contact_id_put
#
# Update specific contact
# 
# @param int $list_id Contact list id (required)
# @param int $contact_id Contact ID (required)
# @param Contact $contact Contact model (required)
{
    my $params = {
    'list_id' => {
        data_type => 'int',
        description => 'Contact list id',
        required => '1',
    },
    'contact_id' => {
        data_type => 'int',
        description => 'Contact ID',
        required => '1',
    },
    'contact' => {
        data_type => 'Contact',
        description => 'Contact model',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_contacts_by_list_id_and_contact_id_put' } = { 
    	summary => 'Update specific contact',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_contacts_by_list_id_and_contact_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'list_id' is set
    unless (exists $args{'list_id'}) {
      croak("Missing the required parameter 'list_id' when calling lists_contacts_by_list_id_and_contact_id_put");
    }

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling lists_contacts_by_list_id_and_contact_id_put");
    }

    # verify the required parameter 'contact' is set
    unless (exists $args{'contact'}) {
      croak("Missing the required parameter 'contact' when calling lists_contacts_by_list_id_and_contact_id_put");
    }

    # parse inputs
    my $_resource_path = '/lists/{list_id}/contacts/{contact_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'list_id'}) {
        my $_base_variable = "{" . "list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contact_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'contact'}) {
        $_body_data = $args{'contact'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# lists_contacts_by_list_id_get
#
# Get all contacts in a list
# 
# @param int $list_id Contact list ID (required)
# @param int $page Page number (optional, default to 1)
# @param int $limit Number of records per page (optional, default to 10)
{
    my $params = {
    'list_id' => {
        data_type => 'int',
        description => 'Contact list ID',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Number of records per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_contacts_by_list_id_get' } = { 
    	summary => 'Get all contacts in a list',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_contacts_by_list_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'list_id' is set
    unless (exists $args{'list_id'}) {
      croak("Missing the required parameter 'list_id' when calling lists_contacts_by_list_id_get");
    }

    # parse inputs
    my $_resource_path = '/lists/{list_id}/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'list_id'}) {
        my $_base_variable = "{" . "list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# lists_contacts_by_list_id_post
#
# Create new contact
# 
# @param Contact $contact Contact model (required)
# @param int $list_id List id (required)
# @param int $page Page number (optional, default to 1)
# @param int $limit Number of records per page (optional, default to 10)
{
    my $params = {
    'contact' => {
        data_type => 'Contact',
        description => 'Contact model',
        required => '1',
    },
    'list_id' => {
        data_type => 'int',
        description => 'List id',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Page number',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Number of records per page',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_contacts_by_list_id_post' } = { 
    	summary => 'Create new contact',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_contacts_by_list_id_post {
    my ($self, %args) = @_;

    # verify the required parameter 'contact' is set
    unless (exists $args{'contact'}) {
      croak("Missing the required parameter 'contact' when calling lists_contacts_by_list_id_post");
    }

    # verify the required parameter 'list_id' is set
    unless (exists $args{'list_id'}) {
      croak("Missing the required parameter 'list_id' when calling lists_contacts_by_list_id_post");
    }

    # parse inputs
    my $_resource_path = '/lists/{list_id}/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'list_id'}) {
        my $_base_variable = "{" . "list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'contact'}) {
        $_body_data = $args{'contact'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# lists_remove_opted_out_contacts_by_list_id_and_opt_out_list_id_put
#
# Remove all opted out contacts
# 
# @param int $list_id Your list id (required)
# @param int $opt_out_list_id Your opt out list id (required)
{
    my $params = {
    'list_id' => {
        data_type => 'int',
        description => 'Your list id',
        required => '1',
    },
    'opt_out_list_id' => {
        data_type => 'int',
        description => 'Your opt out list id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_remove_opted_out_contacts_by_list_id_and_opt_out_list_id_put' } = { 
    	summary => 'Remove all opted out contacts',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_remove_opted_out_contacts_by_list_id_and_opt_out_list_id_put {
    my ($self, %args) = @_;

    # verify the required parameter 'list_id' is set
    unless (exists $args{'list_id'}) {
      croak("Missing the required parameter 'list_id' when calling lists_remove_opted_out_contacts_by_list_id_and_opt_out_list_id_put");
    }

    # verify the required parameter 'opt_out_list_id' is set
    unless (exists $args{'opt_out_list_id'}) {
      croak("Missing the required parameter 'opt_out_list_id' when calling lists_remove_opted_out_contacts_by_list_id_and_opt_out_list_id_put");
    }

    # parse inputs
    my $_resource_path = '/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'list_id'}) {
        my $_base_variable = "{" . "list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'opt_out_list_id'}) {
        my $_base_variable = "{" . "opt_out_list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'opt_out_list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# lists_transfer_contact_put
#
# Transfer contact to another list
# 
# @param int $from_list_id List ID for list that contains contact. (required)
# @param int $contact_id Contact ID (required)
# @param int $to_list_id List ID for list you want to transfer contact to. (required)
{
    my $params = {
    'from_list_id' => {
        data_type => 'int',
        description => 'List ID for list that contains contact.',
        required => '1',
    },
    'contact_id' => {
        data_type => 'int',
        description => 'Contact ID',
        required => '1',
    },
    'to_list_id' => {
        data_type => 'int',
        description => 'List ID for list you want to transfer contact to.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'lists_transfer_contact_put' } = { 
    	summary => 'Transfer contact to another list',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub lists_transfer_contact_put {
    my ($self, %args) = @_;

    # verify the required parameter 'from_list_id' is set
    unless (exists $args{'from_list_id'}) {
      croak("Missing the required parameter 'from_list_id' when calling lists_transfer_contact_put");
    }

    # verify the required parameter 'contact_id' is set
    unless (exists $args{'contact_id'}) {
      croak("Missing the required parameter 'contact_id' when calling lists_transfer_contact_put");
    }

    # verify the required parameter 'to_list_id' is set
    unless (exists $args{'to_list_id'}) {
      croak("Missing the required parameter 'to_list_id' when calling lists_transfer_contact_put");
    }

    # parse inputs
    my $_resource_path = '/lists/{from_list_id}/contacts/{contact_id}/{to_list_id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'from_list_id'}) {
        my $_base_variable = "{" . "from_list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'from_list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contact_id'}) {
        my $_base_variable = "{" . "contact_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contact_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'to_list_id'}) {
        my $_base_variable = "{" . "to_list_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'to_list_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
