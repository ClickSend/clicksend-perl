=begin comment

ClickSend v3 API

 This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 

OpenAPI spec version: 3.1
Contact: support@clicksend.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::ClickSendClient::Object::InboundSMSRule;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;



use base ("Class::Accessor", "Class::Data::Inheritable");


#
#Model for Inbound SMS Rules
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

ClickSend v3 API

 This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..* 

OpenAPI spec version: 3.1
Contact: support@clicksend.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::ClickSendClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Model for Inbound SMS Rules',
                                  class => 'InboundSMSRule',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'dedicated_number' => {
    	datatype => 'string',
    	base_name => 'dedicated_number',
    	description => 'Dedicated Number. Can be &#39;*&#39; to apply to all numbers.',
    	format => '',
    	read_only => '',
    		},
    'rule_name' => {
    	datatype => 'string',
    	base_name => 'rule_name',
    	description => 'Rule Name.',
    	format => '',
    	read_only => '',
    		},
    'message_search_type' => {
    	datatype => 'Number',
    	base_name => 'message_search_type',
    	description => 'Message Search Type: 0&#x3D;Any message, 1&#x3D;starts with, 2&#x3D;contains, 3&#x3D;does not contain.',
    	format => '',
    	read_only => '',
    		},
    'message_search_term' => {
    	datatype => 'string',
    	base_name => 'message_search_term',
    	description => 'Message search term.',
    	format => '',
    	read_only => '',
    		},
    'action' => {
    	datatype => 'string',
    	base_name => 'action',
    	description => 'Action to be taken (AUTO_REPLY, EMAIL_USER, EMAIL_FIXED, URL, SMS, POLL, GROUP_SMS, MOVE_CONTACT, CREATE_CONTACT, CREATE_CONTACT_PLUS_EMAIL, CREATE_CONTACT_PLUS_NAME_EMAIL CREATE_CONTACT_PLUS_NAME, SMPP, NONE).',
    	format => '',
    	read_only => '',
    		},
    'action_address' => {
    	datatype => 'string',
    	base_name => 'action_address',
    	description => 'Action address.',
    	format => '',
    	read_only => '',
    		},
    'enabled' => {
    	datatype => 'Number',
    	base_name => 'enabled',
    	description => 'Enabled: Disabled&#x3D;0 or Enabled&#x3D;1.',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'dedicated_number' => 'string',
    'rule_name' => 'string',
    'message_search_type' => 'Number',
    'message_search_term' => 'string',
    'action' => 'string',
    'action_address' => 'string',
    'enabled' => 'Number'
} );

__PACKAGE__->attribute_map( {
    'dedicated_number' => 'dedicated_number',
    'rule_name' => 'rule_name',
    'message_search_type' => 'message_search_type',
    'message_search_term' => 'message_search_term',
    'action' => 'action',
    'action_address' => 'action_address',
    'enabled' => 'enabled'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
